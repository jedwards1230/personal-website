diff --git a/node_modules/next-auth/providers/email.d.ts b/node_modules/next-auth/providers/email.d.ts
deleted file mode 100644
index 0ce16e2..0000000
--- a/node_modules/next-auth/providers/email.d.ts
+++ /dev/null
@@ -1,85 +0,0 @@
-import { Transport, TransportOptions } from "nodemailer";
-import * as JSONTransport from "nodemailer/lib/json-transport.js";
-import * as SendmailTransport from "nodemailer/lib/sendmail-transport/index.js";
-import * as SESTransport from "nodemailer/lib/ses-transport.js";
-import * as SMTPPool from "nodemailer/lib/smtp-pool/index.js";
-import * as SMTPTransport from "nodemailer/lib/smtp-transport.js";
-import * as StreamTransport from "nodemailer/lib/stream-transport.js";
-import type { Awaitable } from "..";
-import type { CommonProviderOptions } from ".";
-import type { Theme } from "../core/types";
-declare type AllTransportOptions = string | SMTPTransport | SMTPTransport.Options | SMTPPool | SMTPPool.Options | SendmailTransport | SendmailTransport.Options | StreamTransport | StreamTransport.Options | JSONTransport | JSONTransport.Options | SESTransport | SESTransport.Options | Transport<any> | TransportOptions;
-export interface SendVerificationRequestParams {
-    identifier: string;
-    url: string;
-    expires: Date;
-    provider: EmailConfig;
-    token: string;
-    theme: Theme;
-}
-export interface EmailUserConfig {
-    server?: AllTransportOptions;
-    type?: "email";
-    /** @default "NextAuth <no-reply@example.com>" */
-    from?: string;
-    /**
-     * How long until the e-mail can be used to log the user in,
-     * in seconds. Defaults to 1 day
-     * @default 86400
-     */
-    maxAge?: number;
-    /** [Documentation](https://next-auth.js.org/providers/email#customizing-emails) */
-    sendVerificationRequest?: (params: SendVerificationRequestParams) => Awaitable<void>;
-    /**
-     * By default, we are generating a random verification token.
-     * You can make it predictable or modify it as you like with this method.
-     * @example
-     * ```js
-     *  Providers.Email({
-     *    async generateVerificationToken() {
-     *      return "ABC123"
-     *    }
-     *  })
-     * ```
-     * [Documentation](https://next-auth.js.org/providers/email#customizing-the-verification-token)
-     */
-    generateVerificationToken?: () => Awaitable<string>;
-    /** If defined, it is used to hash the verification token when saving to the database . */
-    secret?: string;
-    /**
-     * Normalizes the user input before sending the verification request.
-     *
-     * ⚠️ Always make sure this method returns a single email address.
-     *
-     * @note Technically, the part of the email address local mailbox element
-     * (everything before the `@` symbol) should be treated as 'case sensitive'
-     * according to RFC 2821, but in practice this causes more problems than
-     * it solves, e.g.: when looking up users by e-mail from databases.
-     * By default, we treat email addresses as all lower case,
-     * but you can override this function to change this behavior.
-     *
-     * [Documentation](https://next-auth.js.org/providers/email#normalizing-the-e-mail-address) | [RFC 2821](https://tools.ietf.org/html/rfc2821) | [Email syntax](https://en.wikipedia.org/wiki/Email_address#Syntax)
-     */
-    normalizeIdentifier?: (identifier: string) => string;
-}
-export interface EmailConfig extends CommonProviderOptions {
-    id: "email";
-    type: "email";
-    name: "Email";
-    server: AllTransportOptions;
-    from: string;
-    maxAge: number;
-    sendVerificationRequest: (params: SendVerificationRequestParams) => Awaitable<void>;
-    /**
-     * This is copied into EmailConfig in parseProviders() don't use elsewhere
-     */
-    options: EmailUserConfig;
-    secret?: string;
-    generateVerificationToken?: () => Awaitable<string>;
-    normalizeIdentifier?: (identifier: string) => string;
-}
-export declare type EmailProvider = (options: EmailUserConfig) => EmailConfig;
-export declare type EmailProviderType = "Email";
-export default function Email(options: EmailUserConfig): EmailConfig;
-export {};
-//# sourceMappingURL=email.d.ts.map
\ No newline at end of file
diff --git a/node_modules/next-auth/providers/index.d.ts b/node_modules/next-auth/providers/index.d.ts
index 039d0fb..168dfc8 100644
--- a/node_modules/next-auth/providers/index.d.ts
+++ b/node_modules/next-auth/providers/index.d.ts
@@ -1,8 +1,6 @@
 import type { OAuthConfig, OAuthProvider, OAuthProviderType } from "./oauth";
-import type { EmailConfig, EmailProvider, EmailProviderType } from "./email";
 import type { CredentialsConfig, CredentialsProvider, CredentialsProviderType } from "./credentials";
 export * from "./oauth";
-export * from "./email";
 export * from "./credentials";
 export declare type ProviderType = "oauth" | "email" | "credentials";
 export interface CommonProviderOptions {
@@ -11,8 +9,8 @@ export interface CommonProviderOptions {
     type: ProviderType;
     options?: any;
 }
-export declare type Provider = OAuthConfig<any> | EmailConfig | CredentialsConfig;
-export declare type BuiltInProviders = Record<OAuthProviderType, OAuthProvider> & Record<CredentialsProviderType, CredentialsProvider> & Record<EmailProviderType, EmailProvider>;
+export declare type Provider = OAuthConfig<any> | CredentialsConfig;
+export declare type BuiltInProviders = Record<OAuthProviderType, OAuthProvider> & Record<CredentialsProviderType, CredentialsProvider>;
 export declare type AppProviders = Array<Provider | ReturnType<BuiltInProviders[keyof BuiltInProviders]>>;
 export interface AppProvider extends CommonProviderOptions {
     signinUrl: string;
